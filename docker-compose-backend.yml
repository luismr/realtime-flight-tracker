# Flight Tracker Services
services:

  # Flight Tracker Event Producer
  flight-tracker-event-producer:
    container_name: flight-tracker-event-producer
    build:
      context: ./flight-tracker-event-producer
      dockerfile: Dockerfile
    environment:
      - CRON_SCHEDULE=${FLITGH_TRACKER_EVENT_PRODUCER_CRON_SCHEDULE}
      - OPENSKY_URL=${FLIGHT_TRACKER_EVENT_PRODUCER_OPENSKY_URL}
      - KAFKA_BOOTSTRAP_SERVERS=${FLIGHT_TRACKER_EVENT_PRODUCER_KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_TOPIC=${FLIGHT_TRACKER_EVENT_PRODUCER_KAFKA_TOPIC}
      - KAFKA_LOGLEVEL=${FLIGHT_TRACKER_EVENT_PRODUCER_KAFKA_LOGLEVEL}
      - LOGLEVEL=${FLIGHT_TRACKER_EVENT_PRODUCER_LOGLEVEL}
      - LAT_MIN=${FLIGHT_TRACKER_EVENT_PRODUCER_LAT_MIN}
      - LAT_MAX=${FLIGHT_TRACKER_EVENT_PRODUCER_LAT_MAX}
      - LON_MIN=${FLIGHT_TRACKER_EVENT_PRODUCER_LON_MIN}
      - LON_MAX=${FLIGHT_TRACKER_EVENT_PRODUCER_LON_MAX}
    networks:
      - flight-tracker-network
    volumes:
      - ./flight-tracker-event-producer:/app
      - flight-tracker-producer-logs:/var/log
    depends_on:
      - broker1
      - broker2
      - broker3
    restart: unless-stopped

  # Flight Tracker Event Server
  flight-tracker-event-server:
    build:
      context: ./flight-tracker-event-server
      dockerfile: Dockerfile
      args:
        - SPRING_COMMANDER_USERNAME=${GITHUB_USERNAME}
        - SPRING_COMMANDER_TOKEN=${GITHUB_TOKEN}
        - SPRING_DATASOURCE_ROUTING_USERNAME=${GITHUB_USERNAME}
        - SPRING_DATASOURCE_ROUTING_TOKEN=${GITHUB_TOKEN}
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      # Read-Write Routing Configuration
      - SPRING_DATASOURCE_WRITER_JDBCURL=jdbc:postgresql://postgres-writer:5432/flighttracker
      - SPRING_DATASOURCE_WRITER_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_WRITER_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATASOURCE_READER_JDBCURL=jdbc:postgresql://postgres-reader:5432/flighttracker
      - SPRING_DATASOURCE_READER_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_READER_PASSWORD=${POSTGRES_PASSWORD}
      - APP_READ_WRITE_ROUTING_ENABLED=true
      # Redis Configuration
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      # Kafka Configuration
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker1:19092,broker2:19093,broker3:19094
    networks:
      - flight-tracker-network
    volumes:
      - ./flight-tracker-event-server:/app
      - flight-tracker-server-logs:/var/log
    depends_on:
      postgres_writer:
        condition: service_healthy
      postgres_reader:
        condition: service_healthy
      redis:
        condition: service_started
      broker1:
        condition: service_started
      broker2:
        condition: service_started
      broker3:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  flight-tracker-producer-logs:
  flight-tracker-server-logs: 